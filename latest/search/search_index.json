{
    "docs": [
        {
            "location": "/", 
            "text": "Discuit.jl documentation\n\n\nFast parameter inference for discrete state space continuous time (DSSCT) models in Julia.\n \n!\u2013 Discuit: simulation and parameter inference for discrete state space continuous time (DSSCT) models. \u2013\n\n\n!!! note\n    Please note that this package is still in development.\n\n\n\n\nPackage Features\n\n\n#\n\n\nDiscuit\n \n \nModule\n.\n\n\nDiscuit is a package for:\n\n\n\n\nUser defined DSSCT models.\n\n\nPre programmed with many well known epidemiological models.\n\n\nExact simulation using Gillespie's algorithm.\n\n\nData augmented Markov chain Monte Carlo (MCMC).\n\n\nAutomated autocorrelation; Geweke and Gelman-Rubin diagnostics.\n\n\nDeveloped for Julia \n1.0\n.\n\n\nAuthor: Martin Burke (martin.burke@bioss.ac.uk)\n\n\nDate: 2018-08-22\n\n\n\n\nsource\n\n\n\n\nContents\n\n\n\n\nDiscuit.jl models\n\n\nModel builder\n\n\n\n\n\n\nDiscuit.jl examples\n\n\nSIS model\n\n\nCustom MCMC\n\n\n\n\n\n\nDiscuit.jl manual\n\n\nContents\n\n\nCustom structs\n\n\nFunctions\n\n\nIndex\n\n\nReferences\n\n\n\n\n\n\nDiscuit.jl documentation\n\n\nPackage Features\n\n\nContents\n\n\nInstallation\n\n\nUsage\n\n\nIndex\n\n\ntest\n\n\n\n\n\n\n\n\n\n\nInstallation\n\n\nThe package can be installed by typing \n]\n in the REPL to enter the Pkg mode and running:\n\n\npkg\n add https://github.com/mjb3/Discuit.jl\n\n\n\n\n\n\nUsage\n\n\nThe \nDiscuit.jl examples\n section provides enough code to get up and running with further information available in the \nDiscuit.jl manual\n.\n\n\n\n\nIndex\n\n\n\n\nDiscuit\n\n\nDiscuit.DiscuitModel\n\n\nDiscuit.GelmanResults\n\n\nDiscuit.MCMCResults\n\n\nDiscuit.Observations\n\n\nDiscuit.SimResults\n\n\nDiscuit.compute_autocorrelation\n\n\nDiscuit.generate_gaussian_obs_model\n\n\nDiscuit.generate_generic_obs_function\n\n\nDiscuit.generate_model\n\n\nDiscuit.generate_weak_prior\n\n\nDiscuit.gillespie_sim\n\n\nDiscuit.print_gelman_results\n\n\nDiscuit.print_mcmc_results\n\n\nDiscuit.print_observations\n\n\nDiscuit.print_trajectory\n\n\nDiscuit.read_obs_data_from_file\n\n\nDiscuit.run_custom_mcmc\n\n\nDiscuit.run_gelman_diagnostic\n\n\nDiscuit.run_met_hastings_mcmc\n\n\nDiscuit.set_random_seed\n\n\n\n\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\n\n@article{pizza2000identification,\n  title={Identification of vaccine candidates against serogroup B meningococcus by whole-genome sequencing},\n  author={Pizza, Mariagrazia and Scarlato, Vincenzo and Masignani, Vega and Giuliani, Marzia Monica and Arico, Beatrice and Comanducci, Maurizio and Jennings, Gary T and Baldi, Lucia and Bartolini, Erika and Capecchi, Barbara and others},\n  journal={Science},\n  volume={287},\n  number={5459},\n  pages={1816--1820},\n  year={2000},\n  publisher={American Association for the Advancement of Science}\n}", 
            "title": "Introduction"
        }, 
        {
            "location": "/#discuitjl-documentation", 
            "text": "Fast parameter inference for discrete state space continuous time (DSSCT) models in Julia.   !\u2013 Discuit: simulation and parameter inference for discrete state space continuous time (DSSCT) models. \u2013  !!! note\n    Please note that this package is still in development.", 
            "title": "Discuit.jl documentation"
        }, 
        {
            "location": "/#package-features", 
            "text": "#  Discuit     Module .  Discuit is a package for:   User defined DSSCT models.  Pre programmed with many well known epidemiological models.  Exact simulation using Gillespie's algorithm.  Data augmented Markov chain Monte Carlo (MCMC).  Automated autocorrelation; Geweke and Gelman-Rubin diagnostics.  Developed for Julia  1.0 .  Author: Martin Burke (martin.burke@bioss.ac.uk)  Date: 2018-08-22   source", 
            "title": "Package Features"
        }, 
        {
            "location": "/#contents", 
            "text": "Discuit.jl models  Model builder    Discuit.jl examples  SIS model  Custom MCMC    Discuit.jl manual  Contents  Custom structs  Functions  Index  References    Discuit.jl documentation  Package Features  Contents  Installation  Usage  Index  test", 
            "title": "Contents"
        }, 
        {
            "location": "/#installation", 
            "text": "The package can be installed by typing  ]  in the REPL to enter the Pkg mode and running:  pkg  add https://github.com/mjb3/Discuit.jl", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "The  Discuit.jl examples  section provides enough code to get up and running with further information available in the  Discuit.jl manual .", 
            "title": "Usage"
        }, 
        {
            "location": "/#index", 
            "text": "Discuit  Discuit.DiscuitModel  Discuit.GelmanResults  Discuit.MCMCResults  Discuit.Observations  Discuit.SimResults  Discuit.compute_autocorrelation  Discuit.generate_gaussian_obs_model  Discuit.generate_generic_obs_function  Discuit.generate_model  Discuit.generate_weak_prior  Discuit.gillespie_sim  Discuit.print_gelman_results  Discuit.print_mcmc_results  Discuit.print_observations  Discuit.print_trajectory  Discuit.read_obs_data_from_file  Discuit.run_custom_mcmc  Discuit.run_gelman_diagnostic  Discuit.run_met_hastings_mcmc  Discuit.set_random_seed", 
            "title": "Index"
        }, 
        {
            "location": "/#test", 
            "text": "@article{pizza2000identification,\n  title={Identification of vaccine candidates against serogroup B meningococcus by whole-genome sequencing},\n  author={Pizza, Mariagrazia and Scarlato, Vincenzo and Masignani, Vega and Giuliani, Marzia Monica and Arico, Beatrice and Comanducci, Maurizio and Jennings, Gary T and Baldi, Lucia and Bartolini, Erika and Capecchi, Barbara and others},\n  journal={Science},\n  volume={287},\n  number={5459},\n  pages={1816--1820},\n  year={2000},\n  publisher={American Association for the Advancement of Science}\n}", 
            "title": "test"
        }, 
        {
            "location": "/examples/", 
            "text": "Discuit.jl examples\n\n\nThe following examples provide a flavour of Discuit's core functionality. See the \nDiscuit.jl manual\n for more detailed instructions.\n\n\n\n\nSIS model\n\n\nThe following example is based on that published by Pooley et al. in 2015 in the paper that introduces the model based proposal method. We could use \ngenerate_model(\"SIS\", [100,1])\n to generate the model but constructing it manually is a helpful exercise for getting to know the package. We start by examining \nDiscuitModel\n in the package documentation:\n\n\nADD CODE BLOCK TO SEARCH?\n\n\nNow that we know the necessary parameters for defining a model we can begin by defining a rate function. Note that the correct signature must be used in order for it to be compatible with the package:\n\n\njulia\n function sis_rf(output::Array{Float64, 1}, parameters::Array{Float64, 1}, population::Array{Int64, 1})\n           output[1] = parameters[1] * population[1] * population[2]\n           output[2] = parameters[2] * population[2]\n       end\nsis_rf (generic function with 1 method)\n\n\n\n\nNext we define a simple observation function, again with the correct signature:\n\n\njulia\n obs_fn(population::Array{Int64, 1}) = population\nobs_fn (generic function with 1 method)\n\n\n\n\nNaturally we choose the same prior distribution as Pooley so that we can compare results. The return type must be Float.\n\n\njulia\n function weak_prior(parameters::Array{Float64, 1})\n           parameters[1] \n 0.0 || return 0.0\n           parameters[2] \n 0.0 || return 0.0\n           return 1.0\n       end\nweak_prior (generic function with 1 method)\n\n\n\n\nFinally, we define an observation likelihood model. Again, we use the same as Pooley, with observation errors normally distributed around the true value with standard deviation \n2\n:\n\n\njulia\n function si_gaussian(y::Array{Int64, 1}, population::Array{Int64, 1})\n           obs_err = 2\n           tmp1 = log(1 / (sqrt(2 * pi) * obs_err))\n           tmp2 = 2 * obs_err * obs_err\n           obs_diff = y[2] - population[2]\n           return tmp1 - ((obs_diff * obs_diff) / tmp2)\n       end\nsi_gaussian (generic function with 1 method)\n\n\n\n\nWe can now define a model. The three parameters declared inline are the transition matrix; an optional index for the t0 parameter (ignore for now); and the initial condition which represents the state of the population at the origin of each trajectory:\n\n\njulia\n using Discuit\n\njulia\n model = DiscuitModel(\nSIS\n, sis_rf, [-1 1; 1 -1], 0, [100, 1], obs_fn, weak_prior, si_gaussian)\nDiscuitModel{typeof(Main.ex-1.sis_rf),typeof(Main.ex-1.obs_fn),typeof(Main.ex-1.weak_prior),typeof(Main.ex-1.si_gaussian)}(\nSIS\n, Main.ex-1.sis_rf, [-1 1; 1 -1], 0, [100, 1], Main.ex-1.obs_fn, Main.ex-1.weak_prior, Main.ex-1.si_gaussian)\n\n\n\n\n\n\nSimulation\n\n\nAlthough our main goal is to replicate the analysis of Pooley et al. we can also run a simulation using the \ngillespie_sim\n function.\n\n\njulia\n xi = gillespie_sim(model, [0.003,0.1]);\n\n\n\n\nWe can also visualise the results using the corresponding R package: rDiscuit. ADD LINK\n\n\n\n\n\n\nMCMC\n\n\nRunning an MCMC analysis based on a set of observations data is simple. TBC...\n\n\n\n\n\n\nCustom MCMC\n\n\nSome situations...\n\n\n\n\nlink to \nDiscuit.jl documentation\n\n\nlink to \nset_random_seed(seed::Int64)", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#discuitjl-examples", 
            "text": "The following examples provide a flavour of Discuit's core functionality. See the  Discuit.jl manual  for more detailed instructions.", 
            "title": "Discuit.jl examples"
        }, 
        {
            "location": "/examples/#sis-model", 
            "text": "The following example is based on that published by Pooley et al. in 2015 in the paper that introduces the model based proposal method. We could use  generate_model(\"SIS\", [100,1])  to generate the model but constructing it manually is a helpful exercise for getting to know the package. We start by examining  DiscuitModel  in the package documentation:  ADD CODE BLOCK TO SEARCH?  Now that we know the necessary parameters for defining a model we can begin by defining a rate function. Note that the correct signature must be used in order for it to be compatible with the package:  julia  function sis_rf(output::Array{Float64, 1}, parameters::Array{Float64, 1}, population::Array{Int64, 1})\n           output[1] = parameters[1] * population[1] * population[2]\n           output[2] = parameters[2] * population[2]\n       end\nsis_rf (generic function with 1 method)  Next we define a simple observation function, again with the correct signature:  julia  obs_fn(population::Array{Int64, 1}) = population\nobs_fn (generic function with 1 method)  Naturally we choose the same prior distribution as Pooley so that we can compare results. The return type must be Float.  julia  function weak_prior(parameters::Array{Float64, 1})\n           parameters[1]   0.0 || return 0.0\n           parameters[2]   0.0 || return 0.0\n           return 1.0\n       end\nweak_prior (generic function with 1 method)  Finally, we define an observation likelihood model. Again, we use the same as Pooley, with observation errors normally distributed around the true value with standard deviation  2 :  julia  function si_gaussian(y::Array{Int64, 1}, population::Array{Int64, 1})\n           obs_err = 2\n           tmp1 = log(1 / (sqrt(2 * pi) * obs_err))\n           tmp2 = 2 * obs_err * obs_err\n           obs_diff = y[2] - population[2]\n           return tmp1 - ((obs_diff * obs_diff) / tmp2)\n       end\nsi_gaussian (generic function with 1 method)  We can now define a model. The three parameters declared inline are the transition matrix; an optional index for the t0 parameter (ignore for now); and the initial condition which represents the state of the population at the origin of each trajectory:  julia  using Discuit\n\njulia  model = DiscuitModel( SIS , sis_rf, [-1 1; 1 -1], 0, [100, 1], obs_fn, weak_prior, si_gaussian)\nDiscuitModel{typeof(Main.ex-1.sis_rf),typeof(Main.ex-1.obs_fn),typeof(Main.ex-1.weak_prior),typeof(Main.ex-1.si_gaussian)}( SIS , Main.ex-1.sis_rf, [-1 1; 1 -1], 0, [100, 1], Main.ex-1.obs_fn, Main.ex-1.weak_prior, Main.ex-1.si_gaussian)", 
            "title": "SIS model"
        }, 
        {
            "location": "/examples/#simulation", 
            "text": "Although our main goal is to replicate the analysis of Pooley et al. we can also run a simulation using the  gillespie_sim  function.  julia  xi = gillespie_sim(model, [0.003,0.1]);  We can also visualise the results using the corresponding R package: rDiscuit. ADD LINK", 
            "title": "Simulation"
        }, 
        {
            "location": "/examples/#mcmc", 
            "text": "Running an MCMC analysis based on a set of observations data is simple. TBC...", 
            "title": "MCMC"
        }, 
        {
            "location": "/examples/#custom-mcmc", 
            "text": "Some situations...   link to  Discuit.jl documentation  link to  set_random_seed(seed::Int64)", 
            "title": "Custom MCMC"
        }, 
        {
            "location": "/models/", 
            "text": "Discuit.jl models\n\n\nThe following pre defined models can be invoked by ADD FUNCTION...\n\n\n\n\nModel builder\n\n\nPre defined models:\n\n\n```--\n\n\nDefaults\n\n\nDiscuit.jl models\n are \nmutable struct\ns so it is convenient to generate pre defined with default values for most things and allow the user to overwrite as required. Only the model name and \ninitial_condition\n are required to call ADD XREF. The following gives an overview of important defaults that the user should note before proceeding with their analysis.\n\n\nObservation function\n\n\nThe default \nmodel.obs_function\n is YET TO BE DETERMINED...\n\n\nObservation likelihood model\n\n\nThe default \nmodel.obs_model\n is YET TO BE DETERMINED...\n\n\nPrior density function\n\n\nThe default \nmodel.prior\n density function is weak, e.g. in a simple two parameter model it is equivalent to:\n\n\nfunction weak_prior(parameters::Array{Float64, 1})\n    parameters[1] \ngt; 0.0 || return 0.0\n    parameters[2] \ngt; 0.0 || return 0.0\n    return 1.0\nend\n\n\n\n\nNote that all models generated by the ADD XREF have \nt0_index = 0\n by default and that changing this parameter will likely require replacing the the density with something like:\n\n\nfunction weak_prior(parameters::Array{Float64, 1})\n    parameters[1] \ngt; 0.0 || return 0.0\n    parameters[2] \ngt; 0.0 || return 0.0\n    parameters[3] \nlt; 0.0 || return 0.0\n    return 1.0\nend\n\n\n\n\nwhere \nparameters[3]\n is designated as the, e.g. initial infection, which is assumed to have taken place prior to e.g. the initial observation at t = 0.0. ADD LATEX...\n\n\nClassic Kermack-McKendrick models\n\n\nSI\n\n\nThe susceptible-infectious (\n\"SI\"\n) is a very basic model with only one type of event. Individuals who become infected remain infected for the duration of trajectory.\n\n\n@raw html \nimg src=\nhttps://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/si.png\n alt=\nSI model\n height=\n120\n/\n\n\n\n\nSIR\n\n\nThe classic Kermack-McKendrick susceptible-infectious-recovered (\n\"SIR\"\n) model.\n\n\n@raw html \nimg src=\nhttps://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sir.png\n alt=\nSIR model\n height=\n120\n/\n\n\n\n\nSIS\n\n\n@raw html \nimg src=\nhttps://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sis.png\n alt=\nSIS model\n height=\n140\n/\n\n\n\n\nThe susceptible-infectious-susceptible (\n\"SIS\"\n) model is an extension of the classic Kermack-McKendrick (\nSIR\n) model for diseases which do not confer lasting immunity.\n\n\n@raw html \nimg src=\nhttps://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sis_sim.png\n alt=\nSIS simulation\n height=\n140\n/\n\n\n\n\nSIRS\n\n\nThe susceptible-infectious-recovered-susceptible (\n\"SIRS\"\n) model incorporates all of the above, i.e. it is for diseases which do not confer long lasting immunity.\n\n\n@raw html \nimg src=\nhttps://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sirs.png\n alt=\nSIRS model\n height=\n140\n/\n\n\n\n\nLatent Kermack-McKendrick models\n\n\nThe next class of models extend the classic Kermack-McKendrick by accounting for an exposed state \nE\n between infection and the onset of infectiousness.\n\n\nSEI\n\n\nThe susceptible-exposed-infectious (\n\"SEI\"\n model.\n\n\n@raw html \nimg src=\nhttps://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sei.png\n alt=\nSEI model\n height=\n100\n/\n\n\n\n\nSEIR\n\n\n@raw html \nimg src=\nhttps://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/seir.png\n alt=\nSEIR model\n height=\n100\n/\n\n\n\n\nSEIS\n\n\nSEIRS\n\n\nMiscellaneous\n\n\nLotka-Volterra predator-prey model\n\n\nThe Lotka-Volterra model is well known for its application to predator-prey interactions but can also be used to model chemical, bio molecular and other auto regulating biological systems. Compartments are labelled Predator, pRey. The \nmodel.rate_function\n for prey reproduction, predator reproduction and predator death is defined as:\n\n\nfunction lotka_rf(output, parameters::Array{Float64, 1}, population::Array{Int64, 1})\n  # prey; predator reproduction; predator death\n  output[1] = parameters[1] * population[2]\n  output[2] = parameters[2] * population[1] * population[2]\n  output[3] = parameters[3] * population[1]\nend\n\n\n\n\nwith the transition matrix given as:\n\n\nm_transition = [ 0 1; 1 -1; -1  0 ]\n\n\n\n\nRoss-MacDonald predator-prey model\n\n\nSETIR model for bTB\n\n\nReferences\n\n\n```\n\n\n@raw html \n \n \n \n \n \n @article{pizza2000identification,   title={Identification of vaccine candidates against serogroup B meningococcus by whole-genome sequencing},   author={Pizza, Mariagrazia and Scarlato, Vincenzo and Masignani, Vega and Giuliani, Marzia Monica and Arico, Beatrice and Comanducci, Maurizio and Jennings, Gary T and Baldi, Lucia and Bartolini, Erika and Capecchi, Barbara and others},   journal={Science},   volume={287},   number={5459},   pages={1816\u20131820},   year={2000},   publisher={American Association for the Advancement of Science} } @book{book1,   author = \"Donald Knuth\",   title = \"Concrete Mathematics\" } \n \n \n \n ```", 
            "title": "Models"
        }, 
        {
            "location": "/models/#discuitjl-models", 
            "text": "The following pre defined models can be invoked by ADD FUNCTION...", 
            "title": "Discuit.jl models"
        }, 
        {
            "location": "/models/#model-builder", 
            "text": "Pre defined models:  ```--", 
            "title": "Model builder"
        }, 
        {
            "location": "/models/#defaults", 
            "text": "Discuit.jl models  are  mutable struct s so it is convenient to generate pre defined with default values for most things and allow the user to overwrite as required. Only the model name and  initial_condition  are required to call ADD XREF. The following gives an overview of important defaults that the user should note before proceeding with their analysis.", 
            "title": "Defaults"
        }, 
        {
            "location": "/models/#observation-function", 
            "text": "The default  model.obs_function  is YET TO BE DETERMINED...", 
            "title": "Observation function"
        }, 
        {
            "location": "/models/#observation-likelihood-model", 
            "text": "The default  model.obs_model  is YET TO BE DETERMINED...", 
            "title": "Observation likelihood model"
        }, 
        {
            "location": "/models/#prior-density-function", 
            "text": "The default  model.prior  density function is weak, e.g. in a simple two parameter model it is equivalent to:  function weak_prior(parameters::Array{Float64, 1})\n    parameters[1]  gt; 0.0 || return 0.0\n    parameters[2]  gt; 0.0 || return 0.0\n    return 1.0\nend  Note that all models generated by the ADD XREF have  t0_index = 0  by default and that changing this parameter will likely require replacing the the density with something like:  function weak_prior(parameters::Array{Float64, 1})\n    parameters[1]  gt; 0.0 || return 0.0\n    parameters[2]  gt; 0.0 || return 0.0\n    parameters[3]  lt; 0.0 || return 0.0\n    return 1.0\nend  where  parameters[3]  is designated as the, e.g. initial infection, which is assumed to have taken place prior to e.g. the initial observation at t = 0.0. ADD LATEX...", 
            "title": "Prior density function"
        }, 
        {
            "location": "/models/#classic-kermack-mckendrick-models", 
            "text": "", 
            "title": "Classic Kermack-McKendrick models"
        }, 
        {
            "location": "/models/#si", 
            "text": "The susceptible-infectious ( \"SI\" ) is a very basic model with only one type of event. Individuals who become infected remain infected for the duration of trajectory.  @raw html  img src= https://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/si.png  alt= SI model  height= 120 /", 
            "title": "SI"
        }, 
        {
            "location": "/models/#sir", 
            "text": "The classic Kermack-McKendrick susceptible-infectious-recovered ( \"SIR\" ) model.  @raw html  img src= https://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sir.png  alt= SIR model  height= 120 /", 
            "title": "SIR"
        }, 
        {
            "location": "/models/#sis", 
            "text": "@raw html  img src= https://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sis.png  alt= SIS model  height= 140 /  The susceptible-infectious-susceptible ( \"SIS\" ) model is an extension of the classic Kermack-McKendrick ( SIR ) model for diseases which do not confer lasting immunity.  @raw html  img src= https://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sis_sim.png  alt= SIS simulation  height= 140 /", 
            "title": "SIS"
        }, 
        {
            "location": "/models/#sirs", 
            "text": "The susceptible-infectious-recovered-susceptible ( \"SIRS\" ) model incorporates all of the above, i.e. it is for diseases which do not confer long lasting immunity.  @raw html  img src= https://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sirs.png  alt= SIRS model  height= 140 /", 
            "title": "SIRS"
        }, 
        {
            "location": "/models/#latent-kermack-mckendrick-models", 
            "text": "The next class of models extend the classic Kermack-McKendrick by accounting for an exposed state  E  between infection and the onset of infectiousness.", 
            "title": "Latent Kermack-McKendrick models"
        }, 
        {
            "location": "/models/#sei", 
            "text": "The susceptible-exposed-infectious ( \"SEI\"  model.  @raw html  img src= https://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/sei.png  alt= SEI model  height= 100 /", 
            "title": "SEI"
        }, 
        {
            "location": "/models/#seir", 
            "text": "@raw html  img src= https://raw.githubusercontent.com/mjb3/Discuit.jl/master/docs/img/seir.png  alt= SEIR model  height= 100 /", 
            "title": "SEIR"
        }, 
        {
            "location": "/models/#seis", 
            "text": "", 
            "title": "SEIS"
        }, 
        {
            "location": "/models/#seirs", 
            "text": "", 
            "title": "SEIRS"
        }, 
        {
            "location": "/models/#miscellaneous", 
            "text": "", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/models/#lotka-volterra-predator-prey-model", 
            "text": "The Lotka-Volterra model is well known for its application to predator-prey interactions but can also be used to model chemical, bio molecular and other auto regulating biological systems. Compartments are labelled Predator, pRey. The  model.rate_function  for prey reproduction, predator reproduction and predator death is defined as:  function lotka_rf(output, parameters::Array{Float64, 1}, population::Array{Int64, 1})\n  # prey; predator reproduction; predator death\n  output[1] = parameters[1] * population[2]\n  output[2] = parameters[2] * population[1] * population[2]\n  output[3] = parameters[3] * population[1]\nend  with the transition matrix given as:  m_transition = [ 0 1; 1 -1; -1  0 ]", 
            "title": "Lotka-Volterra predator-prey model"
        }, 
        {
            "location": "/models/#ross-macdonald-predator-prey-model", 
            "text": "", 
            "title": "Ross-MacDonald predator-prey model"
        }, 
        {
            "location": "/models/#setir-model-for-btb", 
            "text": "", 
            "title": "SETIR model for bTB"
        }, 
        {
            "location": "/models/#references", 
            "text": "```  @raw html             @article{pizza2000identification,   title={Identification of vaccine candidates against serogroup B meningococcus by whole-genome sequencing},   author={Pizza, Mariagrazia and Scarlato, Vincenzo and Masignani, Vega and Giuliani, Marzia Monica and Arico, Beatrice and Comanducci, Maurizio and Jennings, Gary T and Baldi, Lucia and Bartolini, Erika and Capecchi, Barbara and others},   journal={Science},   volume={287},   number={5459},   pages={1816\u20131820},   year={2000},   publisher={American Association for the Advancement of Science} } @book{book1,   author = \"Donald Knuth\",   title = \"Concrete Mathematics\" }         ```", 
            "title": "References"
        }, 
        {
            "location": "/manual/", 
            "text": "Discuit.jl manual\n\n\nThis section contains a directory of \nstruct\ns and \nFunction\ns in the package. See \nDiscuit.jl examples\n for a broad overview of the package's core functionality.\n\n\n\n\nContents\n\n\n\n\nDiscuit.jl models\n\n\nModel builder\n\n\n\n\n\n\nDiscuit.jl examples\n\n\nSIS model\n\n\nCustom MCMC\n\n\n\n\n\n\nDiscuit.jl manual\n\n\nContents\n\n\nCustom structs\n\n\nFunctions\n\n\nIndex\n\n\nReferences\n\n\n\n\n\n\nDiscuit.jl documentation\n\n\nPackage Features\n\n\nContents\n\n\nInstallation\n\n\nUsage\n\n\nIndex\n\n\ntest\n\n\n\n\n\n\n\n\n\n\nCustom structs\n\n\n#\n\n\nDiscuit.DiscuitModel\n \n \nType\n.\n\n\nDiscuitModel\n\n\n\n\nFields\n\n\n\n\nmodel_name\n          \u2013 string, e,g, \n\"SIR\"\n.\n\n\nrate_function\n       \u2013 event rate function.\n\n\nm_transition\n        \u2013 transition matrix.\n\n\nt0_index\n            \u2013 index of the parameter that represents the initial time. \n0\n if fixed at \n0.0\n.\n\n\ninitial_condition\n   \u2013 initial condition\n\n\nobs_function\n        \u2013 observation function.\n\n\nprior\n               \u2013 prior density function.\n\n\nobs_model\n           \u2013 observation likelihood model.\n\n\n\n\nA \nmutable struct\n which represents a DSSCT model for use with \nDiscuit.jl\n functions.\n\n\nsource\n\n\n#\n\n\nDiscuit.SimResults\n \n \nType\n.\n\n\nSimResults\n\n\n\n\nFields\n\n\n\n\ntrajectory\n      \u2013 array of type \nEvent\n.\n\n\nobservations\n    \u2013 variable of type \nObservations\n.\n\n\n\n\nThe results of a simulation.\n\n\nsource\n\n\n#\n\n\nDiscuit.Observations\n \n \nType\n.\n\n\nObservations\n\n\n\n\nStores one column vector of observation times and one or more column vectors of observation integer values.\n\n\nFields\n\n\n\n\ntime\n    \u2013 observation times.\n\n\nval\n     \u2013 observation values.\n\n\n\n\nsource\n\n\n#\n\n\nDiscuit.MCMCResults\n \n \nType\n.\n\n\nMCMCResults\n\n\n\n\nFields\n\n\n\n\nsamples\n     \u2013 two dimensional array of samples.\n\n\nmc_accepted\n \u2013 proposal accepted\n\n\nmean\n        \u2013 sample mean.\n\n\ncovar\n       \u2013 parameter covariance matrix.\n\n\n\n\nThe results of an MCMC analysis including samples; mean; covariance matrix; adaptation period; and results of the Geweke test of stationarity.\n\n\nsource\n\n\n#\n\n\nDiscuit.GelmanResults\n \n \nType\n.\n\n\nGelmanResults\n\n\n\n\nFields\n\n\n\n\nmu\n      \u2013 between chain sample mean.\n\n\nsre\n     \u2013 scale reduction factor estimate.\n\n\nsre_ll\n  \u2013 scale reduction factor lower confidence interval.\n\n\nsre_ul\n  \u2013 scale reduction factor upper confidence interval.\n\n\nmcmc\n    \u2013 array of \nMCMCResults\n\n\n\n\nResults of a Gelman Rubin convergence diagnostic including n \nMCMCResults\n variables; \nmu\n; and the scale reduction factor estimates (\nsre\n).\n\n\nsource\n\n\n\n\nFunctions\n\n\nThis section is organised in three parts:\n\n\n\n\nthe main package \ncore functionality\n for working with standard Discuit models\n\n\nutilities\n, for loading to and from file\n\n\ncustom MCMC\n, for running custom algorithms\n\n\n\n\n\n\ncore functionality\n\n\n#\n\n\nDiscuit.set_random_seed\n \n \nMethod\n.\n\n\nset_random_seed(seed)\n\n\n\n\nExamples\n\n\n```@repl\nusing Discuit # hide\nset_random_seed(1234)\n\n\nDoes what it says on the tin but only if you give it an integer.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L50-L61' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.gillespie_sim' href='#Discuit.gillespie_sim'\n#\n/a\n\n**`Discuit.gillespie_sim`** \nmdash; *Function*.\n\n\n\n\ngillespie_sim(model, parameters, tmax = 100.0, num_obs = 5)\n\n\n**Parameters**\n\n  * `model`       \u2013 `DiscuitModel`\n  * `parameters`  \u2013 model parameters.\n  * `tmax`        \u2013 maximum time.\n  * `num_obs`     \u2013 number of observations to draw,\n\nRun a DGA simulation on `model`. Returns a SimResults containing the trajectory and observations data.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L105-L115' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.run_met_hastings_mcmc' href='#Discuit.run_met_hastings_mcmc'\n#\n/a\n\n**`Discuit.run_met_hastings_mcmc`** \nmdash; *Function*.\n\n\n\n\nrun_met_hastings_mcmc(model, obs_data, initial_parameters, steps = 50000, adapt_period = 10000, mbp = true, ppp = 0.3)\n\n\n**Parameters**\n\n  * `model`               \u2013 [DiscuitModel](@ref).\n  * `obs_data`            \u2013 [Observations](@ref) data.\n  * `initial_parameters`  \u2013 initial model parameters (i.e. sample).\n  * `steps`               \u2013 number of iterations.\n  * `mbp`                 \u2013 model based proposals (MBP). Set `mbp = false` for standard proposals.\n  * `ppp`                 \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not required for MBP.\n\nRun an MCMC analysis based on `model` and `obs_data` of type `Observations`. The number of samples obtained is equal to `steps` - `adapt_period`.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L382-L394' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.run_custom_mcmc' href='#Discuit.run_custom_mcmc'\n#\n/a\n\n**`Discuit.run_custom_mcmc`** \nmdash; *Function*.\n\n\n\n\nrun_custom_mcmc(model, obs_data, proposal_function, x0, steps = 50000, adapt_period = 10000, prop_param = false, ppp = 0.3)\n\n\n**Parameters**\n\n  * `model`               \u2013 [DiscuitModel](@ref).\n  * `obs_data`            \u2013 [Observations](@ref) data.\n  * `proposal_function`   \u2013 `Function` for proposing changes to the trajectory. NEED TO EXPAND AND XREF...\n  * `x0`                  \u2013 [MarkovState](@ref) representing the initial sample and trajectory.\n  * `steps`               \u2013 number of iterations.\n  * `prop_param`          \u2013 simulaneously propose changes to parameters. Default: `false`.\n  * `ppp`                 \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not relevant if `prop_param = true`.\n\nRun a custom MCMC analysis. Similar to `run_met_hastings_mcmc` except that the`proposal_function` (of type Function) and initial state `x0` (of type MarkovState) are user defined.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L404-L417' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.run_gelman_diagnostic' href='#Discuit.run_gelman_diagnostic'\n#\n/a\n\n**`Discuit.run_gelman_diagnostic`** \nmdash; *Function*.\n\n\n\n\nrun_gelman_diagnostic(m_model, obs_data, initial_parameters, steps = 50000, adapt_period = 10000, mbp = true, ppp = 0.3)\n\n\n**Parameters**\n\n  * `model`               \u2013 [DiscuitModel](@ref).\n  * `obs_data`            \u2013 [Observations](@ref) data.\n  * `initial_parameters`  \u2013 matrix of initial model parameters. Each column vector correspondes to a single model parameter.\n  * `steps`               \u2013 number of iterations.\n  * `mbp`                 \u2013 model based proposals (MBP). Set `mbp = false` for standard proposals.\n  * `ppp`                 \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not required for MBP.\n\nRun n (equal to the number of rows in `initial_parameters`)  MCMC analyses and perform a Gelman-Rubin convergence diagnostic on the results. NEED TO OVERLOAD AND EXPAND.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L656-L668' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.compute_autocorrelation' href='#Discuit.compute_autocorrelation'\n#\n/a\n\n**`Discuit.compute_autocorrelation`** \nmdash; *Function*.\n\n\n\n\ncompute_autocorrelation(mcmc, lags = 200)\n\n\n**Parameters**\n\n  * `mcmc`    \u2013 [MCMCResults](@ref).\n  * `lags`    \u2013 the number of lags to compute. Default: 200.\n\nCompute autocorrelation R for a single Markov chain.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L546-L554' class='documenter-source'\nsource\n/a\nbr\n\n\n\n\ncompute_autocorrelation(mcmc, lags = 200)\n\n\n**Parameters**\n\n  * `mcmc`    \u2013 an array of [MCMCResults](@ref).\n  * `lags`    \u2013 the number of lags to compute. Default: 200.\n\nCompute autocorrelation R' for a two or more Markov chains.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L578-L586' class='documenter-source'\nsource\n/a\nbr\n\n\n\n\na id='model-helpers-1'\n/a\n\n\n### model helpers\n\n\n[Discuit.jl](@ref) includes tools for generating components which can help minimise the amount of work required to generate customised [DiscuitModel](@ref)s, including `generate_model(...)` which is used to access a library of pre defined [Discuit.jl models](models.md#Discuit.jl-models-1).\n\n\na id='Discuit.generate_generic_obs_function-Tuple{}' href='#Discuit.generate_generic_obs_function-Tuple{}'\n#\n/a\n\n**`Discuit.generate_generic_obs_function`** \nmdash; *Method*.\n\n\n\n\ngenerate_generic_obs_function()\n\n\n**Examples**\n\n```@repl 1\ngenerate_generic_obs_function()\n\n\n\n\nGenerates a simple observation function for use in a \nDiscuitModel\n. Not very realistic...\n\n\nsource\n\n\n#\n\n\nDiscuit.generate_weak_prior\n \n \nMethod\n.\n\n\ngenerate_weak_prior(n)\n\n\n\n\nParameters\n\n\n\n\nn\n   \u2013 the number of parameters in the model.\n\n\n\n\nExamples\n\n\n```@repl 1\nusing Discuit # hide\ngenerate_weak_prior(1)\n\n\nGenerate a \nweak\n prior density function, where `n` is the number of parameters in the model.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/discuit_models.jl#L4-L18' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.generate_gaussian_obs_model' href='#Discuit.generate_gaussian_obs_model'\n#\n/a\n\n**`Discuit.generate_gaussian_obs_model`** \nmdash; *Function*.\n\n\n\n\ngenerate_gaussian_obs_model(n, \u03c3 = 2.0)\n\n\n**Parameters**\n\n  * `n`   \u2013 the number of discrete states in the model.\n  * `\u03c3`   \u2013 observation error.\n\nNEED TO ADD latex eqn...\n\n**Examples**\n\n```@repl 1\nusing Discuit # hide\np = generate_weak_prior(1)\n\n\n\n\nGenerate a Gaussian observation model for a model with \nn\n states. Optionally specify observation error \n\u03c3\n.\n\n\nsource\n\n\n#\n\n\nDiscuit.generate_model\n \n \nFunction\n.\n\n\ngenerate_model(model_name, initial_condition, \u03c3 = 2.0)\n\n\n\n\nParameters\n\n\n\n\nmodel_name\n          \u2013 the model, e.g. \"SI\"; \"SIR\"; \"SEIR\"; etc\n\n\ninitial_condition\n   \u2013 initial condition.\n\n\n\u03c3\n                   \u2013 observation error.\n\n\n\n\nmodel_name\n \noptions\n\n\n\n\n\"SI\"\n\n\n\"SIR\"\n\n\n\"SIS\"\n\n\n\"SEI\"\n\n\n\"SEIR\"\n\n\n\"SEIS\"\n\n\n\"SEIRS\"\n\n\n\"PREDPREY\"\n\n\n\"ROSSMAC\"\n\n\n\n\nExamples\n\n\n```@repl 1\ngenerate_model(\"SIS\", [100,1])\n\n\nGenerates a [DiscuitModel](@ref). Optionally specify observation error `\u03c3`.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/discuit_models.jl#L107-L133' class='documenter-source'\nsource\n/a\nbr\n\n\n\n\na id='utilities-1'\n/a\n\n\n### utilities\n\n\na id='Discuit.print_trajectory-Tuple{DiscuitModel,SimResults,String}' href='#Discuit.print_trajectory-Tuple{DiscuitModel,SimResults,String}'\n#\n/a\n\n**`Discuit.print_trajectory`** \nmdash; *Method*.\n\n\n\n\nprint_trajectory(model, sim_results, fpath)\n\n\n**Parameters**\n\n  * `model`       \u2013 [DiscuitModel](@ref).\n  * `sim_results` \u2013 [SimResults](@ref).\n  * `fpath`       \u2013 the destination file path.\n\nSave an augmented trajectory from a variable of type `SimResults` (i.e. from a call to [gillespie_sim](@ref)) to the file `fpath`, e.g. \n./out/sim.csv\n.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L897-L906' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.print_observations-Tuple{Observations,String}' href='#Discuit.print_observations-Tuple{Observations,String}'\n#\n/a\n\n**`Discuit.print_observations`** \nmdash; *Method*.\n\n\n\n\nprint_observations(obs_data, fpath)\n\n\n**Parameters**\n\n  * `obs_data`    \u2013 [Observations](@ref) data.\n  * `fpath`       \u2013 the destination file path.\n\nSave a set of observations (e.g. from a `SimResults` obtained by a call to [gillespie_sim](@ref)) to the file `fpath`, e.g. \n./out/obs.csv\n.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L940-L948' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.read_obs_data_from_file-Tuple{String}' href='#Discuit.read_obs_data_from_file-Tuple{String}'\n#\n/a\n\n**`Discuit.read_obs_data_from_file`** \nmdash; *Method*.\n\n\n\n\nread_obs_data_from_file(fpath)\n\n\n**Parameters**\n\n  * `fpath`       \u2013 the destination file path.\n\nRead a set of observations from the location `fpath` and return the results as a variable of type [Observations](@ref).\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L965-L972' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.print_mcmc_results-Tuple{MCMCResults,String}' href='#Discuit.print_mcmc_results-Tuple{MCMCResults,String}'\n#\n/a\n\n**`Discuit.print_mcmc_results`** \nmdash; *Method*.\n\n\n\n\nprint_mcmc_results(mcmc, dpath)\n\n\n**Parameters**\n\n  * `results` \u2013 [MCMCResults](@ref).\n  * `dpath`   \u2013 the path of the directory where the results will be saved.\n\nSave the results from a call to [run*met*hastings_mcmc](@ref) or [run*custom*mcmc](@ref) to the directory `dpath`, e.g. \n./out/mcmc/\n.\n\n\n\na target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L833-L841' class='documenter-source'\nsource\n/a\nbr\n\n\n\na id='Discuit.print_gelman_results-Tuple{GelmanResults,String}' href='#Discuit.print_gelman_results-Tuple{GelmanResults,String}'\n#\n/a\n\n**`Discuit.print_gelman_results`** \nmdash; *Method*.\n\n\n\n\nprint_gelman_results(results::GelmanResults, dpath::String)\n\n\nParameters\n\n- \nresults\n -- \nGelmanResults\n.\n- \ndpath\n   -- the path of the directory where the results will be saved.\n```\n\n\nSave the results from a call to \nrun\ngelman\ndiagnostic\n to the directory \ndpath\n, e.g. \"./out/gelman/\".\n\n\nsource\n\n\n\n\ncustom MCMC\n\n\nTBC...\n\n\n\n\nIndex\n\n\n\n\nDiscuit\n\n\nDiscuit.DiscuitModel\n\n\nDiscuit.GelmanResults\n\n\nDiscuit.MCMCResults\n\n\nDiscuit.Observations\n\n\nDiscuit.SimResults\n\n\nDiscuit.compute_autocorrelation\n\n\nDiscuit.generate_gaussian_obs_model\n\n\nDiscuit.generate_generic_obs_function\n\n\nDiscuit.generate_model\n\n\nDiscuit.generate_weak_prior\n\n\nDiscuit.gillespie_sim\n\n\nDiscuit.print_gelman_results\n\n\nDiscuit.print_mcmc_results\n\n\nDiscuit.print_observations\n\n\nDiscuit.print_trajectory\n\n\nDiscuit.read_obs_data_from_file\n\n\nDiscuit.run_custom_mcmc\n\n\nDiscuit.run_gelman_diagnostic\n\n\nDiscuit.run_met_hastings_mcmc\n\n\nDiscuit.set_random_seed\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\n\n\n\n@book{book1,\n  author = \"Donald Knuth\",\n  title = \"Concrete Mathematics\"\n}", 
            "title": "Manual"
        }, 
        {
            "location": "/manual/#discuitjl-manual", 
            "text": "This section contains a directory of  struct s and  Function s in the package. See  Discuit.jl examples  for a broad overview of the package's core functionality.", 
            "title": "Discuit.jl manual"
        }, 
        {
            "location": "/manual/#contents", 
            "text": "Discuit.jl models  Model builder    Discuit.jl examples  SIS model  Custom MCMC    Discuit.jl manual  Contents  Custom structs  Functions  Index  References    Discuit.jl documentation  Package Features  Contents  Installation  Usage  Index  test", 
            "title": "Contents"
        }, 
        {
            "location": "/manual/#custom-structs", 
            "text": "#  Discuit.DiscuitModel     Type .  DiscuitModel  Fields   model_name           \u2013 string, e,g,  \"SIR\" .  rate_function        \u2013 event rate function.  m_transition         \u2013 transition matrix.  t0_index             \u2013 index of the parameter that represents the initial time.  0  if fixed at  0.0 .  initial_condition    \u2013 initial condition  obs_function         \u2013 observation function.  prior                \u2013 prior density function.  obs_model            \u2013 observation likelihood model.   A  mutable struct  which represents a DSSCT model for use with  Discuit.jl  functions.  source  #  Discuit.SimResults     Type .  SimResults  Fields   trajectory       \u2013 array of type  Event .  observations     \u2013 variable of type  Observations .   The results of a simulation.  source  #  Discuit.Observations     Type .  Observations  Stores one column vector of observation times and one or more column vectors of observation integer values.  Fields   time     \u2013 observation times.  val      \u2013 observation values.   source  #  Discuit.MCMCResults     Type .  MCMCResults  Fields   samples      \u2013 two dimensional array of samples.  mc_accepted  \u2013 proposal accepted  mean         \u2013 sample mean.  covar        \u2013 parameter covariance matrix.   The results of an MCMC analysis including samples; mean; covariance matrix; adaptation period; and results of the Geweke test of stationarity.  source  #  Discuit.GelmanResults     Type .  GelmanResults  Fields   mu       \u2013 between chain sample mean.  sre      \u2013 scale reduction factor estimate.  sre_ll   \u2013 scale reduction factor lower confidence interval.  sre_ul   \u2013 scale reduction factor upper confidence interval.  mcmc     \u2013 array of  MCMCResults   Results of a Gelman Rubin convergence diagnostic including n  MCMCResults  variables;  mu ; and the scale reduction factor estimates ( sre ).  source", 
            "title": "Custom structs"
        }, 
        {
            "location": "/manual/#functions", 
            "text": "This section is organised in three parts:   the main package  core functionality  for working with standard Discuit models  utilities , for loading to and from file  custom MCMC , for running custom algorithms", 
            "title": "Functions"
        }, 
        {
            "location": "/manual/#core-functionality", 
            "text": "#  Discuit.set_random_seed     Method .  set_random_seed(seed)  Examples  ```@repl\nusing Discuit # hide\nset_random_seed(1234)  Does what it says on the tin but only if you give it an integer. a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L50-L61' class='documenter-source' source /a br  a id='Discuit.gillespie_sim' href='#Discuit.gillespie_sim' # /a \n**`Discuit.gillespie_sim`**  mdash; *Function*.  gillespie_sim(model, parameters, tmax = 100.0, num_obs = 5)  **Parameters**\n\n  * `model`       \u2013 `DiscuitModel`\n  * `parameters`  \u2013 model parameters.\n  * `tmax`        \u2013 maximum time.\n  * `num_obs`     \u2013 number of observations to draw,\n\nRun a DGA simulation on `model`. Returns a SimResults containing the trajectory and observations data. a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L105-L115' class='documenter-source' source /a br  a id='Discuit.run_met_hastings_mcmc' href='#Discuit.run_met_hastings_mcmc' # /a \n**`Discuit.run_met_hastings_mcmc`**  mdash; *Function*.  run_met_hastings_mcmc(model, obs_data, initial_parameters, steps = 50000, adapt_period = 10000, mbp = true, ppp = 0.3)  **Parameters**\n\n  * `model`               \u2013 [DiscuitModel](@ref).\n  * `obs_data`            \u2013 [Observations](@ref) data.\n  * `initial_parameters`  \u2013 initial model parameters (i.e. sample).\n  * `steps`               \u2013 number of iterations.\n  * `mbp`                 \u2013 model based proposals (MBP). Set `mbp = false` for standard proposals.\n  * `ppp`                 \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not required for MBP.\n\nRun an MCMC analysis based on `model` and `obs_data` of type `Observations`. The number of samples obtained is equal to `steps` - `adapt_period`. a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L382-L394' class='documenter-source' source /a br  a id='Discuit.run_custom_mcmc' href='#Discuit.run_custom_mcmc' # /a \n**`Discuit.run_custom_mcmc`**  mdash; *Function*.  run_custom_mcmc(model, obs_data, proposal_function, x0, steps = 50000, adapt_period = 10000, prop_param = false, ppp = 0.3)  **Parameters**\n\n  * `model`               \u2013 [DiscuitModel](@ref).\n  * `obs_data`            \u2013 [Observations](@ref) data.\n  * `proposal_function`   \u2013 `Function` for proposing changes to the trajectory. NEED TO EXPAND AND XREF...\n  * `x0`                  \u2013 [MarkovState](@ref) representing the initial sample and trajectory.\n  * `steps`               \u2013 number of iterations.\n  * `prop_param`          \u2013 simulaneously propose changes to parameters. Default: `false`.\n  * `ppp`                 \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not relevant if `prop_param = true`.\n\nRun a custom MCMC analysis. Similar to `run_met_hastings_mcmc` except that the`proposal_function` (of type Function) and initial state `x0` (of type MarkovState) are user defined. a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L404-L417' class='documenter-source' source /a br  a id='Discuit.run_gelman_diagnostic' href='#Discuit.run_gelman_diagnostic' # /a \n**`Discuit.run_gelman_diagnostic`**  mdash; *Function*.  run_gelman_diagnostic(m_model, obs_data, initial_parameters, steps = 50000, adapt_period = 10000, mbp = true, ppp = 0.3)  **Parameters**\n\n  * `model`               \u2013 [DiscuitModel](@ref).\n  * `obs_data`            \u2013 [Observations](@ref) data.\n  * `initial_parameters`  \u2013 matrix of initial model parameters. Each column vector correspondes to a single model parameter.\n  * `steps`               \u2013 number of iterations.\n  * `mbp`                 \u2013 model based proposals (MBP). Set `mbp = false` for standard proposals.\n  * `ppp`                 \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not required for MBP.\n\nRun n (equal to the number of rows in `initial_parameters`)  MCMC analyses and perform a Gelman-Rubin convergence diagnostic on the results. NEED TO OVERLOAD AND EXPAND. a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L656-L668' class='documenter-source' source /a br  a id='Discuit.compute_autocorrelation' href='#Discuit.compute_autocorrelation' # /a \n**`Discuit.compute_autocorrelation`**  mdash; *Function*.  compute_autocorrelation(mcmc, lags = 200)  **Parameters**\n\n  * `mcmc`    \u2013 [MCMCResults](@ref).\n  * `lags`    \u2013 the number of lags to compute. Default: 200.\n\nCompute autocorrelation R for a single Markov chain. a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L546-L554' class='documenter-source' source /a br  compute_autocorrelation(mcmc, lags = 200)  **Parameters**\n\n  * `mcmc`    \u2013 an array of [MCMCResults](@ref).\n  * `lags`    \u2013 the number of lags to compute. Default: 200.\n\nCompute autocorrelation R' for a two or more Markov chains. a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L578-L586' class='documenter-source' source /a br  a id='model-helpers-1' /a \n\n### model helpers\n\n\n[Discuit.jl](@ref) includes tools for generating components which can help minimise the amount of work required to generate customised [DiscuitModel](@ref)s, including `generate_model(...)` which is used to access a library of pre defined [Discuit.jl models](models.md#Discuit.jl-models-1). a id='Discuit.generate_generic_obs_function-Tuple{}' href='#Discuit.generate_generic_obs_function-Tuple{}' # /a \n**`Discuit.generate_generic_obs_function`**  mdash; *Method*.  generate_generic_obs_function()  **Examples**\n\n```@repl 1\ngenerate_generic_obs_function()  Generates a simple observation function for use in a  DiscuitModel . Not very realistic...  source  #  Discuit.generate_weak_prior     Method .  generate_weak_prior(n)  Parameters   n    \u2013 the number of parameters in the model.   Examples  ```@repl 1\nusing Discuit # hide\ngenerate_weak_prior(1)  Generate a  weak  prior density function, where `n` is the number of parameters in the model. a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/discuit_models.jl#L4-L18' class='documenter-source' source /a br  a id='Discuit.generate_gaussian_obs_model' href='#Discuit.generate_gaussian_obs_model' # /a \n**`Discuit.generate_gaussian_obs_model`**  mdash; *Function*.  generate_gaussian_obs_model(n, \u03c3 = 2.0)  **Parameters**\n\n  * `n`   \u2013 the number of discrete states in the model.\n  * `\u03c3`   \u2013 observation error.\n\nNEED TO ADD latex eqn...\n\n**Examples**\n\n```@repl 1\nusing Discuit # hide\np = generate_weak_prior(1)  Generate a Gaussian observation model for a model with  n  states. Optionally specify observation error  \u03c3 .  source  #  Discuit.generate_model     Function .  generate_model(model_name, initial_condition, \u03c3 = 2.0)  Parameters   model_name           \u2013 the model, e.g. \"SI\"; \"SIR\"; \"SEIR\"; etc  initial_condition    \u2013 initial condition.  \u03c3                    \u2013 observation error.   model_name   options   \"SI\"  \"SIR\"  \"SIS\"  \"SEI\"  \"SEIR\"  \"SEIS\"  \"SEIRS\"  \"PREDPREY\"  \"ROSSMAC\"   Examples  ```@repl 1\ngenerate_model(\"SIS\", [100,1])  Generates a [DiscuitModel](@ref). Optionally specify observation error `\u03c3`. a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/discuit_models.jl#L107-L133' class='documenter-source' source /a br  a id='utilities-1' /a \n\n### utilities a id='Discuit.print_trajectory-Tuple{DiscuitModel,SimResults,String}' href='#Discuit.print_trajectory-Tuple{DiscuitModel,SimResults,String}' # /a \n**`Discuit.print_trajectory`**  mdash; *Method*.  print_trajectory(model, sim_results, fpath)  **Parameters**\n\n  * `model`       \u2013 [DiscuitModel](@ref).\n  * `sim_results` \u2013 [SimResults](@ref).\n  * `fpath`       \u2013 the destination file path.\n\nSave an augmented trajectory from a variable of type `SimResults` (i.e. from a call to [gillespie_sim](@ref)) to the file `fpath`, e.g.  ./out/sim.csv . a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L897-L906' class='documenter-source' source /a br  a id='Discuit.print_observations-Tuple{Observations,String}' href='#Discuit.print_observations-Tuple{Observations,String}' # /a \n**`Discuit.print_observations`**  mdash; *Method*.  print_observations(obs_data, fpath)  **Parameters**\n\n  * `obs_data`    \u2013 [Observations](@ref) data.\n  * `fpath`       \u2013 the destination file path.\n\nSave a set of observations (e.g. from a `SimResults` obtained by a call to [gillespie_sim](@ref)) to the file `fpath`, e.g.  ./out/obs.csv . a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L940-L948' class='documenter-source' source /a br  a id='Discuit.read_obs_data_from_file-Tuple{String}' href='#Discuit.read_obs_data_from_file-Tuple{String}' # /a \n**`Discuit.read_obs_data_from_file`**  mdash; *Method*.  read_obs_data_from_file(fpath)  **Parameters**\n\n  * `fpath`       \u2013 the destination file path.\n\nRead a set of observations from the location `fpath` and return the results as a variable of type [Observations](@ref). a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L965-L972' class='documenter-source' source /a br  a id='Discuit.print_mcmc_results-Tuple{MCMCResults,String}' href='#Discuit.print_mcmc_results-Tuple{MCMCResults,String}' # /a \n**`Discuit.print_mcmc_results`**  mdash; *Method*.  print_mcmc_results(mcmc, dpath)  **Parameters**\n\n  * `results` \u2013 [MCMCResults](@ref).\n  * `dpath`   \u2013 the path of the directory where the results will be saved.\n\nSave the results from a call to [run*met*hastings_mcmc](@ref) or [run*custom*mcmc](@ref) to the directory `dpath`, e.g.  ./out/mcmc/ . a target='_blank' href='https://github.com/mjb3/Discuit.jl/blob/676b463f936dafea4c809573a3cdc885400ba971/src/Discuit.jl#L833-L841' class='documenter-source' source /a br  a id='Discuit.print_gelman_results-Tuple{GelmanResults,String}' href='#Discuit.print_gelman_results-Tuple{GelmanResults,String}' # /a \n**`Discuit.print_gelman_results`**  mdash; *Method*.  print_gelman_results(results::GelmanResults, dpath::String)  Parameters \n-  results  --  GelmanResults .\n-  dpath    -- the path of the directory where the results will be saved.\n```  Save the results from a call to  run gelman diagnostic  to the directory  dpath , e.g. \"./out/gelman/\".  source", 
            "title": "core functionality"
        }, 
        {
            "location": "/manual/#custom-mcmc", 
            "text": "TBC...", 
            "title": "custom MCMC"
        }, 
        {
            "location": "/manual/#index", 
            "text": "Discuit  Discuit.DiscuitModel  Discuit.GelmanResults  Discuit.MCMCResults  Discuit.Observations  Discuit.SimResults  Discuit.compute_autocorrelation  Discuit.generate_gaussian_obs_model  Discuit.generate_generic_obs_function  Discuit.generate_model  Discuit.generate_weak_prior  Discuit.gillespie_sim  Discuit.print_gelman_results  Discuit.print_mcmc_results  Discuit.print_observations  Discuit.print_trajectory  Discuit.read_obs_data_from_file  Discuit.run_custom_mcmc  Discuit.run_gelman_diagnostic  Discuit.run_met_hastings_mcmc  Discuit.set_random_seed", 
            "title": "Index"
        }, 
        {
            "location": "/manual/#references", 
            "text": "@book{book1,\n  author = \"Donald Knuth\",\n  title = \"Concrete Mathematics\"\n}", 
            "title": "References"
        }
    ]
}