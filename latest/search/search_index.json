{
    "docs": [
        {
            "location": "/", 
            "text": "Discuit.jl documentation\n\n\nFast parameter inference for discrete state space continuous time models in Julia.\n\n\nDiscuit: simulation and parameter inference for discrete state space continuous time (DSSCT) models.\n\n\n!!! note\n    Please note that this package is still in development.\n\n\n\n\nPackage Features\n\n\n\n\nUser defined DSSCT models.\n\n\nPre programmed with many well known epidemiological models.\n\n\nExact simulation using Gillespie's algorithm\n\n\nData augmented Markov chain Monte Carlo (MCMC)\n\n\nAutomated autocorrelation; Geweke and Gelman-Rubin diagnostics\n\n\nDeveloped for Julia \n1.0\n.\n\n\n\n\n\n\nInstallation\n\n\nThe package can be installed by typing \n]\n in the REPL to enter the Pkg mode and running:\n\n\npkg\n add https://github.com/mjb3/Discuit.jl\n\n\n\n\n\n\nUsage\n\n\nThe \nDiscuit.jl examples\n section provides enough code to get up and running with further information available in the \nDiscuit.jl manual\n.\n\n\n\n\nContents\n\n\n\n\nDiscuit.jl examples\n\n\nSIS model\n\n\nCustom MCMC\n\n\n\n\n\n\nDiscuit.jl manual\n\n\nCustom structs\n\n\nFunctions\n\n\n\n\n\n\nDiscuit.jl documentation\n\n\nPackage Features\n\n\nInstallation\n\n\nUsage\n\n\nContents\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nIndex\n\n\n\n\nDiscuit.DiscuitModel\n\n\nDiscuit.GelmanResults\n\n\nDiscuit.MCMCResults\n\n\nDiscuit.Observations\n\n\nDiscuit.SimResults\n\n\nDiscuit.gillespie_sim\n\n\nDiscuit.print_gelman_results\n\n\nDiscuit.print_mcmc_results\n\n\nDiscuit.print_observations\n\n\nDiscuit.print_trajectory\n\n\nDiscuit.read_obs_data_from_file\n\n\nDiscuit.run_custom_mcmc\n\n\nDiscuit.run_gelman_diagnostic\n\n\nDiscuit.run_met_hastings_mcmc\n\n\nDiscuit.set_random_seed", 
            "title": "Introduction"
        }, 
        {
            "location": "/#discuitjl-documentation", 
            "text": "Fast parameter inference for discrete state space continuous time models in Julia.  Discuit: simulation and parameter inference for discrete state space continuous time (DSSCT) models.  !!! note\n    Please note that this package is still in development.", 
            "title": "Discuit.jl documentation"
        }, 
        {
            "location": "/#package-features", 
            "text": "User defined DSSCT models.  Pre programmed with many well known epidemiological models.  Exact simulation using Gillespie's algorithm  Data augmented Markov chain Monte Carlo (MCMC)  Automated autocorrelation; Geweke and Gelman-Rubin diagnostics  Developed for Julia  1.0 .", 
            "title": "Package Features"
        }, 
        {
            "location": "/#installation", 
            "text": "The package can be installed by typing  ]  in the REPL to enter the Pkg mode and running:  pkg  add https://github.com/mjb3/Discuit.jl", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "The  Discuit.jl examples  section provides enough code to get up and running with further information available in the  Discuit.jl manual .", 
            "title": "Usage"
        }, 
        {
            "location": "/#contents", 
            "text": "Discuit.jl examples  SIS model  Custom MCMC    Discuit.jl manual  Custom structs  Functions    Discuit.jl documentation  Package Features  Installation  Usage  Contents  Index", 
            "title": "Contents"
        }, 
        {
            "location": "/#index", 
            "text": "Discuit.DiscuitModel  Discuit.GelmanResults  Discuit.MCMCResults  Discuit.Observations  Discuit.SimResults  Discuit.gillespie_sim  Discuit.print_gelman_results  Discuit.print_mcmc_results  Discuit.print_observations  Discuit.print_trajectory  Discuit.read_obs_data_from_file  Discuit.run_custom_mcmc  Discuit.run_gelman_diagnostic  Discuit.run_met_hastings_mcmc  Discuit.set_random_seed", 
            "title": "Index"
        }, 
        {
            "location": "/examples/", 
            "text": "Discuit.jl examples\n\n\nThe following examples provide a flavour of Discuit's core functionality. See the \nDiscuit.jl manual\n for more detailed instructions.\n\n\n\n\nSIS model\n\n\nThe following example is based on that published by Poolet et al. in 2015 in the paper that introduces the model based proposal method,\n\n\n\n\nSimulation\n\n\n\n\nMCMC\n\n\nRunning an MCMC analysis based on a set of observations data is simple. TBC...\n\n\n\n\nCustom MCMC\n\n\nSome situations...\n\n\n\n\nlink to \nDiscuit.jl documentation\n\n\nlink to \nset_random_seed(seed::Int64)", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#discuitjl-examples", 
            "text": "The following examples provide a flavour of Discuit's core functionality. See the  Discuit.jl manual  for more detailed instructions.", 
            "title": "Discuit.jl examples"
        }, 
        {
            "location": "/examples/#sis-model", 
            "text": "The following example is based on that published by Poolet et al. in 2015 in the paper that introduces the model based proposal method,", 
            "title": "SIS model"
        }, 
        {
            "location": "/examples/#simulation", 
            "text": "", 
            "title": "Simulation"
        }, 
        {
            "location": "/examples/#mcmc", 
            "text": "Running an MCMC analysis based on a set of observations data is simple. TBC...", 
            "title": "MCMC"
        }, 
        {
            "location": "/examples/#custom-mcmc", 
            "text": "Some situations...   link to  Discuit.jl documentation  link to  set_random_seed(seed::Int64)", 
            "title": "Custom MCMC"
        }, 
        {
            "location": "/manual/", 
            "text": "Discuit.jl manual\n\n\n\n\nCustom structs\n\n\n#\n\n\nDiscuit.DiscuitModel\n \n \nType\n.\n\n\nDiscuitModel\n\n\n\n\nA DSSCT model for use in Discuit. NEED TO EXPAND...\n\n\nFields\n\n\n\n\nmodel_name\n          \u2013 string, e,g, \"SIR\".\n\n\nrate_function\n       \u2013 event rate function.\n\n\nm_transition\n        \u2013 transition matrix.\n\n\nt0_index\n            \u2013 index of the parameter that represents the initial time. 0 if fixed at 0.0.\n\n\ninitial_condition\n   \u2013 initial condition\n\n\nobs_function\n        \u2013 observation function.\n\n\nprior\n               \u2013 prior density function.\n\n\nobs_model\n           \u2013 observation likelihood model.\n\n\n\n\nsource\n\n\n#\n\n\nDiscuit.SimResults\n \n \nType\n.\n\n\nSimResults\n\n\n\n\nThe results of a simulation.\n\n\nFields\n\n\n\n\ntrajectory\n      \u2013 array of type \nEvent\n.\n\n\nobservations\n    \u2013 variable of type \nObservations\n.\n\n\n\n\nsource\n\n\n#\n\n\nDiscuit.Observations\n \n \nType\n.\n\n\nObservations\n\n\n\n\nStores one column vector of observation times and one or more column vectors of observation integer values.\n\n\nFields\n\n\n\n\ntime\n    \u2013 observation times.\n\n\nval\n     \u2013 observation values.\n\n\n\n\nsource\n\n\n#\n\n\nDiscuit.MCMCResults\n \n \nType\n.\n\n\nMCMCResults\n\n\n\n\nThe results of an MCMC analysis including samples; mean; covariance matrix; adaptation period; and results of the Geweke test of stationarity.\n\n\nFields\n\n\n\n\nsamples\n     \u2013 two dimensional array of samples.\n\n\nmc_accepted\n \u2013 proposal accepted\n\n\nmean\n        \u2013 sample mean.\n\n\ncovar\n       \u2013 parameter covariance matrix.\n\n\n\n\nsource\n\n\n#\n\n\nDiscuit.GelmanResults\n \n \nType\n.\n\n\nGelmanResults\n\n\n\n\nResults of a Gelman Rubin convergence diagnostic including n \nMCMCResults\n variables; \nmu\n; and the scale reduction factor estimates (\nsre\n)..\n\n\nFields\n\n\n\n\nmu\n      \u2013 between chain sample mean.\n\n\nsre\n     \u2013 scale reduction factor estimate.\n\n\nsre_ll\n  \u2013 scale reduction factor lower confidence interval.\n\n\nsre_ul\n  \u2013 scale reduction factor upper confidence interval.\n\n\nmcmc\n    \u2013 array of \nMCMCResults\n\n\n\n\nsource\n\n\n\n\nFunctions\n\n\nThis section is organised in three parts:\n\n\n\n\nthe main package \ncore functionality\n for working with standard Discuit models\n\n\nutilities\n, for loading to and from file\n\n\ncustom MCMC\n, for running custom algorithms\n\n\n\n\n\n\ncore functionality\n\n\n#\n\n\nDiscuit.set_random_seed\n \n \nMethod\n.\n\n\nset_random_seed(seed)\n\n\n\n\nDoes what it says on the tin but only if you give it an integer.\n\n\nsource\n\n\n#\n\n\nDiscuit.gillespie_sim\n \n \nFunction\n.\n\n\ngillespie_sim(model, parameters, tmax = 100.0, num_obs = 5)\n\n\n\n\nRun a DGA simulation on \nmodel\n. Returns a SimResults containing the trajectory and observations data.\n\n\nParameters\n\n\n\n\nmodel\n       \u2013 \nDiscuitModel\n\n\nparameters\n  \u2013 model parameters.\n\n\ntmax\n        \u2013 maximum time.\n\n\nnum_obs\n     \u2013 number of observations to draw,\n\n\n\n\nsource\n\n\n#\n\n\nDiscuit.run_met_hastings_mcmc\n \n \nFunction\n.\n\n\nrun_met_hastings_mcmc(model, obs_data, initial_parameters, steps = 50000, adapt_period = 10000, mbp = true, ppp = 0.3)\n\n\n\n\nParameters\n\n\n\n\nmodel\n               \u2013 \nDiscuitModel\n.\n\n\nobs_data\n            \u2013 \nObservations\n data.\n\n\ninitial_parameters\n  \u2013 initial model parameters (i.e. sample).\n\n\nsteps\n               \u2013 number of iterations.\n\n\nmbp\n                 \u2013 model based proposals (MBP). Set \nmbp = false\n for standard proposals.\n\n\nppp\n                 \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not required for MBP.\n\n\n\n\nRun an MCMC analysis based on \nmodel\n and \nobs_data\n of type \nObservations\n. The number of samples obtained is equal to \nsteps\n - \nadapt_period\n.\n\n\nsource\n\n\n#\n\n\nDiscuit.run_custom_mcmc\n \n \nFunction\n.\n\n\nrun_custom_mcmc(model, obs_data, proposal_function, x0, steps = 50000, adapt_period = 10000, prop_param = false, ppp = 0.3)\n\n\n\n\nParameters\n\n\n\n\nmodel\n               \u2013 \nDiscuitModel\n.\n\n\nobs_data\n            \u2013 \nObservations\n data.\n\n\nproposal_function\n   \u2013 \nFunction\n for proposing changes to the trajectory. NEED TO EXPAND AND XREF...\n\n\nx0\n                  \u2013 \nMarkovState\n representing the initial sample and trajectory.\n\n\nsteps\n               \u2013 number of iterations.\n\n\nprop_param\n          \u2013 simulaneously propose changes to parameters. Default: \nfalse\n.\n\n\nppp\n                 \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not relevant if \nprop_param = true\n.\n\n\n\n\nRun a custom MCMC analysis. Similar to \nrun_met_hastings_mcmc\n except that the\nproposal_function\n (of type Function) and initial state \nx0\n (of type MarkovState) are user defined.\n\n\nsource\n\n\n#\n\n\nDiscuit.run_gelman_diagnostic\n \n \nFunction\n.\n\n\nrun_gelman_diagnostic(m_model, obs_data, initial_parameters, steps = 50000, adapt_period = 10000, mbp = true, ppp = 0.3)\n\n\n\n\nParameters\n\n\n\n\nmodel\n               \u2013 \nDiscuitModel\n.\n\n\nobs_data\n            \u2013 \nObservations\n data.\n\n\ninitial_parameters\n  \u2013 matrix of initial model parameters. Each column vector correspondes to a single model parameter.\n\n\nsteps\n               \u2013 number of iterations.\n\n\nmbp\n                 \u2013 model based proposals (MBP). Set \nmbp = false\n for standard proposals.\n\n\nppp\n                 \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not required for MBP.\n\n\n\n\nRun n (equal to the number of rows in \ninitial_parameters\n)  MCMC analyses and perform a Gelman-Rubin convergence diagnostic on the results. NEED TO OVERLOAD AND EXPAND.\n\n\nsource\n\n\n\n\nutilities\n\n\n#\n\n\nDiscuit.print_trajectory\n \n \nMethod\n.\n\n\nprint_trajectory(model, sim_results, fpath)\n\n\n\n\nParameters\n\n\n\n\nmodel\n       \u2013 \nDiscuitModel\n.\n\n\nsim_results\n \u2013 \nSimResults\n.\n\n\nfpath\n       \u2013 the destination file path.\n\n\n\n\nSave an augmented trajectory from a variable of type \nSimResults\n (i.e. from a call to \ngillespie_sim\n) to the file \nfpath\n, e.g. \"./out/sim.csv\".\n\n\nsource\n\n\n#\n\n\nDiscuit.print_observations\n \n \nMethod\n.\n\n\nprint_observations(obs_data, fpath)\n\n\n\n\nParameters\n\n\n\n\nobs_data\n    \u2013 \nObservations\n data.\n\n\nfpath\n       \u2013 the destination file path.\n\n\n\n\nSave a set of observations (e.g. from a \nSimResults\n obtained by a call to \ngillespie_sim\n) to the file \nfpath\n, e.g. \"./out/obs.csv\".\n\n\nsource\n\n\n#\n\n\nDiscuit.read_obs_data_from_file\n \n \nMethod\n.\n\n\nread_obs_data_from_file(fpath)\n\n\n\n\nParameters\n\n\n\n\nfpath\n       \u2013 the destination file path.\n\n\n\n\nRead a set of observations from the location \nfpath\n and return the results as a variable of type \nObservations\n.\n\n\nsource\n\n\n#\n\n\nDiscuit.print_mcmc_results\n \n \nMethod\n.\n\n\nprint_mcmc_results(mcmc, dpath)\n\n\n\n\nParameters\n\n\n\n\nresults\n \u2013 \nMCMCResults\n.\n\n\ndpath\n   \u2013 the path of the directory where the results will be saved.\n\n\n\n\nSave the results from a call to \nrun\nmet\nhastings_mcmc\n or \nrun\ncustom\nmcmc\n to the directory \ndpath\n, e.g. \"./out/mcmc/\".\n\n\nsource\n\n\n#\n\n\nDiscuit.print_gelman_results\n \n \nMethod\n.\n\n\nprint_gelman_results(results::GelmanResults, dpath::String)\n\n**Parameters**\n- `results` -- [GelmanResults](@ref).\n- `dpath`   -- the path of the directory where the results will be saved.\n\n\n\n\nSave the results from a call to \nrun\ngelman\ndiagnostic\n to the directory \ndpath\n, e.g. \"./out/gelman/\".\n\n\nsource\n\n\n\n\ncustom MCMC\n\n\nTBC...", 
            "title": "Manual"
        }, 
        {
            "location": "/manual/#discuitjl-manual", 
            "text": "", 
            "title": "Discuit.jl manual"
        }, 
        {
            "location": "/manual/#custom-structs", 
            "text": "#  Discuit.DiscuitModel     Type .  DiscuitModel  A DSSCT model for use in Discuit. NEED TO EXPAND...  Fields   model_name           \u2013 string, e,g, \"SIR\".  rate_function        \u2013 event rate function.  m_transition         \u2013 transition matrix.  t0_index             \u2013 index of the parameter that represents the initial time. 0 if fixed at 0.0.  initial_condition    \u2013 initial condition  obs_function         \u2013 observation function.  prior                \u2013 prior density function.  obs_model            \u2013 observation likelihood model.   source  #  Discuit.SimResults     Type .  SimResults  The results of a simulation.  Fields   trajectory       \u2013 array of type  Event .  observations     \u2013 variable of type  Observations .   source  #  Discuit.Observations     Type .  Observations  Stores one column vector of observation times and one or more column vectors of observation integer values.  Fields   time     \u2013 observation times.  val      \u2013 observation values.   source  #  Discuit.MCMCResults     Type .  MCMCResults  The results of an MCMC analysis including samples; mean; covariance matrix; adaptation period; and results of the Geweke test of stationarity.  Fields   samples      \u2013 two dimensional array of samples.  mc_accepted  \u2013 proposal accepted  mean         \u2013 sample mean.  covar        \u2013 parameter covariance matrix.   source  #  Discuit.GelmanResults     Type .  GelmanResults  Results of a Gelman Rubin convergence diagnostic including n  MCMCResults  variables;  mu ; and the scale reduction factor estimates ( sre )..  Fields   mu       \u2013 between chain sample mean.  sre      \u2013 scale reduction factor estimate.  sre_ll   \u2013 scale reduction factor lower confidence interval.  sre_ul   \u2013 scale reduction factor upper confidence interval.  mcmc     \u2013 array of  MCMCResults   source", 
            "title": "Custom structs"
        }, 
        {
            "location": "/manual/#functions", 
            "text": "This section is organised in three parts:   the main package  core functionality  for working with standard Discuit models  utilities , for loading to and from file  custom MCMC , for running custom algorithms", 
            "title": "Functions"
        }, 
        {
            "location": "/manual/#core-functionality", 
            "text": "#  Discuit.set_random_seed     Method .  set_random_seed(seed)  Does what it says on the tin but only if you give it an integer.  source  #  Discuit.gillespie_sim     Function .  gillespie_sim(model, parameters, tmax = 100.0, num_obs = 5)  Run a DGA simulation on  model . Returns a SimResults containing the trajectory and observations data.  Parameters   model        \u2013  DiscuitModel  parameters   \u2013 model parameters.  tmax         \u2013 maximum time.  num_obs      \u2013 number of observations to draw,   source  #  Discuit.run_met_hastings_mcmc     Function .  run_met_hastings_mcmc(model, obs_data, initial_parameters, steps = 50000, adapt_period = 10000, mbp = true, ppp = 0.3)  Parameters   model                \u2013  DiscuitModel .  obs_data             \u2013  Observations  data.  initial_parameters   \u2013 initial model parameters (i.e. sample).  steps                \u2013 number of iterations.  mbp                  \u2013 model based proposals (MBP). Set  mbp = false  for standard proposals.  ppp                  \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not required for MBP.   Run an MCMC analysis based on  model  and  obs_data  of type  Observations . The number of samples obtained is equal to  steps  -  adapt_period .  source  #  Discuit.run_custom_mcmc     Function .  run_custom_mcmc(model, obs_data, proposal_function, x0, steps = 50000, adapt_period = 10000, prop_param = false, ppp = 0.3)  Parameters   model                \u2013  DiscuitModel .  obs_data             \u2013  Observations  data.  proposal_function    \u2013  Function  for proposing changes to the trajectory. NEED TO EXPAND AND XREF...  x0                   \u2013  MarkovState  representing the initial sample and trajectory.  steps                \u2013 number of iterations.  prop_param           \u2013 simulaneously propose changes to parameters. Default:  false .  ppp                  \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not relevant if  prop_param = true .   Run a custom MCMC analysis. Similar to  run_met_hastings_mcmc  except that the proposal_function  (of type Function) and initial state  x0  (of type MarkovState) are user defined.  source  #  Discuit.run_gelman_diagnostic     Function .  run_gelman_diagnostic(m_model, obs_data, initial_parameters, steps = 50000, adapt_period = 10000, mbp = true, ppp = 0.3)  Parameters   model                \u2013  DiscuitModel .  obs_data             \u2013  Observations  data.  initial_parameters   \u2013 matrix of initial model parameters. Each column vector correspondes to a single model parameter.  steps                \u2013 number of iterations.  mbp                  \u2013 model based proposals (MBP). Set  mbp = false  for standard proposals.  ppp                  \u2013 the proportion of parameter (vs. trajectory) proposals. Default: 30%. NB. not required for MBP.   Run n (equal to the number of rows in  initial_parameters )  MCMC analyses and perform a Gelman-Rubin convergence diagnostic on the results. NEED TO OVERLOAD AND EXPAND.  source", 
            "title": "core functionality"
        }, 
        {
            "location": "/manual/#utilities", 
            "text": "#  Discuit.print_trajectory     Method .  print_trajectory(model, sim_results, fpath)  Parameters   model        \u2013  DiscuitModel .  sim_results  \u2013  SimResults .  fpath        \u2013 the destination file path.   Save an augmented trajectory from a variable of type  SimResults  (i.e. from a call to  gillespie_sim ) to the file  fpath , e.g. \"./out/sim.csv\".  source  #  Discuit.print_observations     Method .  print_observations(obs_data, fpath)  Parameters   obs_data     \u2013  Observations  data.  fpath        \u2013 the destination file path.   Save a set of observations (e.g. from a  SimResults  obtained by a call to  gillespie_sim ) to the file  fpath , e.g. \"./out/obs.csv\".  source  #  Discuit.read_obs_data_from_file     Method .  read_obs_data_from_file(fpath)  Parameters   fpath        \u2013 the destination file path.   Read a set of observations from the location  fpath  and return the results as a variable of type  Observations .  source  #  Discuit.print_mcmc_results     Method .  print_mcmc_results(mcmc, dpath)  Parameters   results  \u2013  MCMCResults .  dpath    \u2013 the path of the directory where the results will be saved.   Save the results from a call to  run met hastings_mcmc  or  run custom mcmc  to the directory  dpath , e.g. \"./out/mcmc/\".  source  #  Discuit.print_gelman_results     Method .  print_gelman_results(results::GelmanResults, dpath::String)\n\n**Parameters**\n- `results` -- [GelmanResults](@ref).\n- `dpath`   -- the path of the directory where the results will be saved.  Save the results from a call to  run gelman diagnostic  to the directory  dpath , e.g. \"./out/gelman/\".  source", 
            "title": "utilities"
        }, 
        {
            "location": "/manual/#custom-mcmc", 
            "text": "TBC...", 
            "title": "custom MCMC"
        }
    ]
}